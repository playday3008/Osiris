name: Linux

# Controls when the action will run. 
on: [push, pull_request]

jobs:
  # Build & upload so files
  linux-build:
    name: Build (Linux)
    runs-on: ubuntu-latest
    
    # Build 3 so files with with different intrinsics
    strategy:
      matrix:
        intrinsic:
          - "sse2"
          - "avx"
          - "avx2"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2.3.4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y libsdl2-dev gcc-11 g++-11
      
    - name: Configure CMake
      run: mkdir Release && cd Release && cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=-m${{ matrix.intrinsic }} -D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11 ..
      
    - name: Build
      run: cd Release && make -j $(nproc --all)
      
      # Move so to separate folder
    - name: Prepare to upload
      run: mkdir ready && cp Release/libOsiris.so ready/libOsiris_${{ matrix.intrinsic }}.so && rm -rf Release
      
      # Calculate SHA1 for so
    - name: SHA1
      working-directory: ready
      run: |
        sha1sum libOsiris_${{ matrix.intrinsic }}.so > libOsiris_${{ matrix.intrinsic }}.so.sha1
        head -c 40 libOsiris_${{ matrix.intrinsic }}.so.sha1
      
      # Upload so and sha1 sum to artifacts
    - name: Upload (${{ matrix.intrinsic }})
      uses: actions/upload-artifact@v2.2.3
      with:
        name: Osiris Release Linux (${{ matrix.intrinsic }})
        path: ready/*

  # Upload so files in one archive
  linux-upload-all:
    needs: linux-build
    name: Upload All (Linux)
    runs-on: ubuntu-latest
    
    steps:
    # Redownload earlier uploaded so and sha1 files (SSE2)
    - name: Download (sse2)
      uses: actions/download-artifact@v2.0.9
      with:
        name: Osiris Release Linux (sse2)
      
    # Redownload earlier uploaded so and sha1 files (SSE2)
    - name: Download (avx)
      uses: actions/download-artifact@v2.0.9
      with:
        name: Osiris Release Linux (avx)
      
    # Redownload earlier uploaded so and sha1 files (SSE2)
    - name: Download (avx2)
      uses: actions/download-artifact@v2.0.9
      with:
        name: Osiris Release Linux (avx2)
      
    # Prepare so files to upload (just rename it and recalculate SHA1 to compare)
    - name: Prepare to upload
      run: |
        mkdir ready
        cp libOsiris_sse2.so ready/libOsiris_SSE2.so
        cp libOsiris_avx.so ready/libOsiris_AVX.so
        cp libOsiris_avx2.so ready/libOsiris_AVX2.so
        cd ready
        sha1sum libOsiris_SSE2.so > libOsiris_SSE2.so.sha1
        sha1sum libOsiris_AVX.so > libOsiris_AVX.so.sha1
        sha1sum libOsiris_AVX2.so > libOsiris_AVX2.so.sha1
      
    # Recheck SHA1 sum and compare it (why not?)
    - name: Check SHA1 match
      run: |
        exitCode=0
        echo "libOsiris_SSE2.so SHA1 hash is:"
        if [[ $(head -c 40 libOsiris_sse2.so.sha1) != $(head -c 40 ready/libOsiris_SSE2.so.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        echo "libOsiris_AVX.so SHA1 hash is:"
        if [[ $(head -c 40 libOsiris_avx.so.sha1) != $(head -c 40 ready/libOsiris_AVX.so.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        echo "libOsiris_AVX2.so SHA1 hash is:"
        if [[ $(head -c 40 libOsiris_avx2.so.sha1) != $(head -c 40 ready/libOsiris_AVX2.so.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        exit $exitCode
      
    # Reupload it as one archive
    - name: Upload All
      uses: actions/upload-artifact@v2.2.3
      with:
        name: Osiris Release Linux All
        path: ready/*
